# shellcheck shell=bash
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export XDG_BIN_HOME="${HOME}/.local/bin"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_LIB_HOME="${HOME}/.local/lib"
export XDG_RUNTIME_DIR="${HOME}/.run"
export XDG_STATE_HOME="${HOME}/.local/state"

if ! [ -d "${XDG_CACHE_HOME}" ]; then
  mkdir -p "${XDG_CACHE_HOME}"
fi

if ! [ -d "${XDG_CONFIG_HOME}" ]; then
  mkdir -p "${XDG_CONFIG_HOME}"
fi

if ! [ -d "${XDG_DATA_HOME}" ]; then
  mkdir -p "${XDG_DATA_HOME}"
fi

if ! [ -d "${XDG_STATE_HOME}" ]; then
  mkdir -p "${XDG_STATE_HOME}"
fi

if ! [ -d "${XDG_RUNTIME_DIR}" ]; then
  mkdir -p "${XDG_RUNTIME_DIR}"
fi

if [ "$(basename "$(pwd)")" = "dotfiles-lite" ] && [ -d "config" ]; then
  echo "Copying configuration files from $(pwd)/config to ${XDG_CONFIG_HOME}"
  cp -R config/* "${XDG_CONFIG_HOME}/"
fi

export ZDOTDIR="${XDG_CONFIG_HOME}/zsh"
export ZIM_HOME="${XDG_DATA_HOME}/zim"
export ZSHZ_CASE="smart"
export ZSHZ_DATA="${XDG_DATA_HOME}/z/.z"

# https://github.com/getsentry/sentry/blob/master/.envrc
# Upgrading Mac can uninstall the Command Line Tools, thus, removing our access to git
# The message talks about xcrun, however, we can use the lack of git as a way to know that we need this
# xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools),
# missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
if [ "$(uname -s)" == "Darwin" ] && [ ! -f "/Library/Developer/CommandLineTools/usr/bin/git" ]; then
    echo -e "$(tput setaf 1)\nERROR: Complete the interactive installation (10+ mins) of the Command Line Tools.$(tput sgr0)"
    xcode-select --install
    return 1
fi

# If .env missing; restore from .env.sample and validate
# See https://github.com/direnv/direnv/wiki/.envrc-Boilerplate
if [ -f config/.env.tmpl ]; then
  if ! command -v gomplate > /dev/null; then
    echo 'Run install.sh before activating direnv'
  elif [ ! -f .env ]; then
    gomplate -f config/.env.tmpl -o .env
  fi
fi

dotenv_if_exists || direnv status # https://direnv.net/man/direnv-stdlib.1.html

# Add the appropriate Homebrew bin directory based on OS
if [ "$(uname)" == "Darwin" ]; then
  PATH_add /opt/homebrew/bin
else
  PATH_add /home/linuxbrew/.linuxbrew/bin
fi

export EDITOR="vim"
export VISUAL="code -n"
export TERMINAL="kitty"
export BROWSER="vivaldi"
export PAGER="less"

export base0="#131313"
export base1="#191919"
export base2="#222222"
export base3="#363537"
export base4="#525053"
export base5="#69676c"
export base6="#8b888f"
export base7="#bab6c0"
export base8="#f7f1ff"
export base8x0c="#2b2b2b"
export blue="#5ad4e6"
export green="#7bd88f"
export orange="#fd9353"
export purple="#948ae3"
export red="#fc618d"
export yellow="#fcd566"
export BOOTSTRAP_CONFIG="${XDG_DATA_HOME}/automation/home-ops/dotfiles/.chezmoidata/bootstrap.toml"
export CAN_USE_SUDO="1"
export DOCKER_BUILDKIT="1"
export ENV_CONFIG="${XDG_DATA_HOME}/automation/home-ops/dotfiles/.chezmoidata/env.toml"
export GOMPLATE_CONFIG="${XDG_CONFIG_HOME}/gomplate/gomplate.yaml"
export GUM_CHOOSE_CURSOR_FOREGROUND="${green}"
export GUM_CHOOSE_ITEM_FOREGROUND="${blue}"
export GUM_CHOOSE_SELECTED_FOREGROUND="${purple}"
export GUM_INPUT_CURSOR_FOREGROUND="${green}"
export GUM_INPUT_PLACEHOLDER="What is the value?"
export GUM_INPUT_PROMPT="> "
export GUM_INPUT_PROMPT_FOREGROUND="${blue}"
export GUM_INPUT_WIDTH="120"
export HAS_ALLOW_UNSAFE="y"
export HOMEBREW_NO_ANALYTICS="0"
export HOMEBREW_NO_INSTALL_CLEANUP="true"
export HOME_OPS_CONFIG="${XDG_CONFIG_HOME}/home-ops/config.toml"
export HOST_CONFIG="${XDG_CONFIG_HOME}/home-ops/host.json"
export NATIVE_IMAGE_BIN="${NATIVE_IMAGE_BIN:-${XDG_BIN_HOME}}"
export PACKAGES_CONFIG="${XDG_DATA_HOME}/automation/home-ops/dotfiles/.chezmoidata/packages.toml"
export SOPS_AGE_KEY_FILE="${XDG_CONFIG_HOME}/age/ansible.key"
export UNISON="${XDG_CONFIG_HOME}/unison"


export AUTOMATION_HOME="${HOME}/.local/share/automation"
export CHEZMOI_HOME="${HOME}/.local/share/automation/home-ops/scripts/dotfiles"
export COLORTERM="truecolor"
export KITTY_CACHE_DIRECTORY="${XDG_CACHE_HOME}/kitty"
export KITTY_CONFIG_DIRECTORY="${XDG_CONFIG_HOME}/kitty"
export KITTY_RUNTIME_DIRECTORY="${XDG_RUNTIME_DIR}/kitty"
export PYTHON_CFLAGS="-march=native -mtune=native"
export PYTHON_CONFIGURE_OPTS="--enable-optimizations --with-lto"
export NODE_CONFIG_DIR="${XDG_CONFIG_HOME}/home-ops"
export NVM_AUTO_USE="true"

# brew
if command -v brew >/dev/null; then
  PATH_add "$(brew --prefix)/bin"
fi

# XDG_BIN_HOME
PATH_add "${XDG_BIN_HOME:-$HOME/.local/bin}"

# pipx bin
PATH_add "$HOME/.local/pipx/bin"

# npm bin
PATH_add "${HOME}/.npm/bin"

# pyenv
PATH_add "${HOME}/.pyenv/bin"

# nvm
PATH_add "${HOME}/.nvm"

# check if python version is set in current dir
if [ -f ".python-version" ] ; then
  if [ ! -d ".venv" ] ; then
      echo "Installing virtualenv for $(python -V)"
      # if we didn't install `py2venv` for python 2.x, we would need to use
      # `virtualenv`, which you would have to install separately.
      python -m venv .venv
  fi
  echo "Activating $(python -V) virtualenv"
  source .venv/bin/activate

  # announce python version and show the path of the current python in ${PATH}
  echo "Virtualenv has been activated for $(python -V)"
  echo "$(which python)"    
fi

# check if nvmrc file exists
if [ -f ".nvmrc" ] ; then
    # load nvm
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    # load node version
    nvm use
fi